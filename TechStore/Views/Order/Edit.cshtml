@model TechStore.Models.ViewModels.CreateOrderViewModel

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()
    
<div class="form-horizontal">
    <h4>CreateOrderViewModel</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })
    @Html.HiddenFor(model => model.OrderID)

    @ViewBag.Error
    <div class="form-group">
        @Html.LabelFor(model => model.CustomerName, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.CustomerName, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.CustomerName, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.OrderDate, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.OrderDate, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.OrderDate, "", new { @class = "text-danger" })
        </div>
    </div>
    <h1> ORDERS: </h1>
    Belongs To Order:
    <div id="products-for-order" class="row">

    </div>
    Doesn't Belong to Order
    <div id="products-not-for-order" class="row">

    </div>
    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>
}

<div>
    @Html.ActionLink("Back to List", "Index")
</div>

<script type="text/javascript">
    //ORDERS
    var productsForOrderDiv = $('#products-for-order');
    var productsNotForOrderDiv = $('#products-not-for-order');
    var productsList = [];

    var htmlToAppendForRemoveProduct = function (ProductID, Name) {
        return "<div class='col-md-6' id='" + ProductID +
            "'><p>" + Name + "</p>" +
            "</div>" +
            "<div class='col-md-6'>" +
            "<button class='btn btn-danger btn-remove' onclick='RemoveProduct(" + ProductID + ")'" +
            ">Remove Product</button>" +
            "</div>";
    };
    var htmlToAppendForAddProduct = function (ProductID, Name) {
        return "<div class='col-md-6' id='" + ProductID +
            "'><p>" + Name + "</p>" +
            "</div>" +
            "<div class='col-md-6'>" +
            "<button class='btn btn-success' onclick='AddProduct(" + ProductID + ")'" +
            ">Add Product</button>" +
            "</div>";
    };
    function ajaxSuccess(data, status) {
        GetProductsPerOrder();
        GetProductsNotInOrder();
    };
    function GetProductsNotInOrder() {
            //Get all products
        productsNotForOrderDiv.empty();
            $.ajax({
                    type: "get",
                    url: "/Order/ProductsNotInOrder/" + @Model.OrderID,
                    success: function (data) {
                        //Once you get the data append it to the Div

                        $.each(data, function (index, item) {
                            //Append with add button
                            let productHTML = htmlToAppendForAddProduct(item.ProductID, item.ProductName);
                            productsNotForOrderDiv.append(productHTML);
                        });
                    },
                    data: {
                        orderID: @Model.OrderID,
                    },
                     contentType: "application/json; charset=utf-8",
                    dataType: "json",
                });
        };
        function GetProductsPerOrder() {
            //Get all products
            productsForOrderDiv.empty();
            $.ajax({
                    type: "get",
                    url: "/Order/ProductsPerOrder/" + @Model.OrderID,
                    success: function (data) {
                        //Once you get the data append it to the Div

                        $.each(data, function (index, item) {
                            //Append with remove button
                            let productHTML = htmlToAppendForRemoveProduct(item.ProductID, item.ProductName);
                            productsForOrderDiv.append(productHTML);
                        });
                    },
                    data: {
                        orderID: @Model.OrderID,
                    },
                     contentType: "application/json; charset=utf-8",
                    dataType: "json",
                });
        };
     var RemoveProduct = function(id){
            var buttonID = id;
            var shouldRemove = confirm("Are you sure you want to remove this product from the order?");
            if (shouldRemove) {
                $.ajax({
                    type: "get",
                    url: "/Order/RemoveProductFromOrder",
                    data: {
                        productID: buttonID,
                        orderID: @Model.OrderID,
                    },
                    success: ajaxSuccess,
                    // contentType: "application/json; charset=utf-8",
                    // dataType: "json",

                });
            }
        };
    var AddProduct = function(id){
            var buttonID = id;
            var shouldRemove = confirm("Are you sure you want to add this product to the order?");
            if (shouldRemove) {
                $.ajax({
                    type: "get",
                    url: "/Order/AddProductToOrder",
                    data: {
                        productID: buttonID,
                        orderID: @Model.OrderID,
                    },
                    success: ajaxSuccess,
                    // contentType: "application/json; charset=utf-8",
                    // dataType: "json",

                });
            }
        };
        


    $(document).ready(function () {

        //Get all rpodcucts
        GetProductsPerOrder();
        GetProductsNotInOrder();

    });
</script>
