@model TechStore.Models.ViewModels.CreateProductViewModel

@{
    ViewBag.Title = "Edit";
}

<h2>Edit</h2>

@using (Html.BeginForm())
{
    @Html.AntiForgeryToken()

<div class="form-horizontal">
    <h4>CreateProductViewModel</h4>
    <hr />
    @Html.ValidationSummary(true, "", new { @class = "text-danger" })

    <div class="form-group">
        @Html.HiddenFor(model => model.ProductID, new { htmlAttributes = new { @class = "form-control" } })
    </div>


    <div class="form-group">
        @Html.LabelFor(model => model.Name, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Name, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Manufacturer, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Manufacturer, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Manufacturer, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Description, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Description, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Description, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DateAdded, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DateAdded, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DateAdded, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.DateUpdated, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.DateUpdated, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.DateUpdated, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.PhotoURL, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.PhotoURL, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.PhotoURL, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.Price, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.Price, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.Price, "", new { @class = "text-danger" })
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.IsInStock, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            <div class="checkbox">
                @Html.EditorFor(model => model.IsInStock)
                @Html.ValidationMessageFor(model => model.IsInStock, "", new { @class = "text-danger" })
            </div>
        </div>
    </div>

    <div class="form-group">
        @Html.LabelFor(model => model.LeftInStock, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.LeftInStock, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.LeftInStock, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group" style="background-color:aquamarine">
        @Html.LabelFor(model => model.isForMainpage, htmlAttributes: new { @class = "control-label col-md-2" })
        
        <div class="col-md-10">
    
            @Html.EditorFor(model => model.isForMainpage)
            @Html.ValidationMessageFor(model => model.isForMainpage, "", new { @class = "text-danger" })
        </div>
    </div>
    <div class="form-group">
        @Html.LabelFor(model => model.AvailableInStockTime, htmlAttributes: new { @class = "control-label col-md-2" })
        <div class="col-md-10">
            @Html.EditorFor(model => model.AvailableInStockTime, new { htmlAttributes = new { @class = "form-control" } })
            @Html.ValidationMessageFor(model => model.AvailableInStockTime, "", new { @class = "text-danger" })
        </div>
    </div>

    <h1> CATEGORIES: </h1>
    Belongs To Category:
    <div id="categories-for-product" class="row">

    </div>
    Doesn't Belong to Category
    <div id="categories-not-for-product" class="row">

    </div>

    <div class="form-group">
        <div class="col-md-offset-2 col-md-10">
            <input id="submit-changes" type="submit" value="Save" class="btn btn-default" />
        </div>
    </div>
</div>

    }

    <div>
        @Html.ActionLink("Back to List", "Index")
    </div>

    <script type="text/javascript">
    var $categoriesForProductDiv = $('#categories-for-product');
    var $categoriesNotForProductDiv = $('#categories-not-for-product');

        var appendingFactory = new htmlAppendingFactory();
        var itemsFactory = new storeFactory(appendingFactory);
    function ajaxSuccess(data, status) {
        itemsFactory.GetCategoriesPerProduct($categoriesForProductDiv,@Model.ProductID);
        itemsFactory.GetCategoriesNotInProduct($categoriesNotForProductDiv,@Model.ProductID);
    };

   
        var RemoveCategory = function (id, event) {
            event.preventDefault();
            var buttonID = id;
            var shouldRemove = confirm("Are you sure you want to remove this product from the category?");
            if (shouldRemove) {
                $.ajax({
                    type: "get",
                    url: "/Product/RemoveProductFromCategory",
                    data: {
                        productID: @Model.ProductID,
                        categoryID: buttonID,
                    },
                    success: ajaxSuccess,
                    // contentType: "application/json; charset=utf-8",
                    // dataType: "json",

                });
            }
        };
        var AddCategory = function (id, event) {
            event.preventDefault();
            var buttonID = id;
            var shouldRemove = confirm("Are you sure you want to add this product to the category?");
            if (shouldRemove) {
                $.ajax({
                    type: "get",
                    url: "/Product/AddProductToCategory",
                    data: {
                        productID: @Model.ProductID,
                        categoryID: buttonID,
                    },
                    success: ajaxSuccess,
                    // contentType: "application/json; charset=utf-8",
                    // dataType: "json",

                });
            }
        };
        


    $(document).ready(function () {

        
       itemsFactory.GetCategoriesPerProduct($categoriesForProductDiv,@Model.ProductID);
        itemsFactory.GetCategoriesNotInProduct($categoriesNotForProductDiv,@Model.ProductID);

    });

    </script>
